Traceback (most recent call last):
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/client.py", line 1082, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/client.py", line 536, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/client.py", line 827, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/anaconda3/envs/qe-mini-example/lib/python3.7/site-packages/nbclient/client.py", line 735, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import copy
import numpy as np
# 加载数据
def loadDataSet(fileName):  # 解析文件，按tab分割字段，得到一个浮点数字类型的矩阵
    dataMat = []              # 文件的最后一个字段是类别标签
    fr = open(fileName)
    for line in fr.readlines():
        curLine = line.strip().split('\t')
        fltLine = list(map(float, curLine))    # 将每个元素转成float类型
        dataMat.append(fltLine)
    return np.array(dataMat)

# 计算欧几里得距离
def distEclud(vecA, vecB):
    return np.sqrt(np.sum(np.power(vecA - vecB, 2))) # 求两个向量之间的距离

# 构建聚簇中心，取k个(此例中为4)随机质心
def randCent(dataSet, k):
    centroid = np.array(np.zeros((k,2)))   # 每个质心有n个坐标值，总共要k个质心，此处n
    for j in range(2):
        minJ = min(dataSet[:,j])
        maxJ = max(dataSet[:,j])
        rangeJ = float(maxJ - minJ)
        centroid[:,j] = minJ + rangeJ * np.random.rand(k)

    return centroid

# k-means 聚类算法
def kMeans(dataSet, k, distMeans =distEclud, createCent = randCent):
    m = dataSet.shape[0];counts=[]
    clusterAssments=[];centroids=[]
    clusterAssment = np.array(np.zeros((m,2)))    # 用于存放该样本属于哪类及质心距离
    # clusterAssment第一列存放该数据所属的中心点，第二列是该数据到中心点的距离
    centroid = createCent(dataSet, k)
    clusterChanged = True   # 用来判断聚类是否已经收敛
    while clusterChanged:
        clusterChanged = False
        count=0
        for i in range(m):  # 把每一个数据点划分到离它最近的中心点
            minDist = np.inf; minIndex = -1;
            for j in range(k):
                distJI = distMeans(centroid[j,:], dataSet[i,:-1])
                if distJI < minDist:
                    minDist = distJI; minIndex = j  # 如果第i个数据点到第j个中心点更近，则将i归属为j
            if clusterAssment[i,0] != minIndex: 
                clusterChanged = True;count+=1  # 如果分配发生变化，则需要继续迭代
                #print(clusterAssment[i,0],'-->',minIndex)
            clusterAssment[i,:] = minIndex,minDist**2   # 并将第i个数据点的分配情况存入字典

        for cent in range(k):   # 重新计算中心点
            ptsInClust = dataSet[clusterAssment[:,0] == cent][:,:-1]   # 取第一列等于cent的所有列
            centroid[cent,:] = np.mean(ptsInClust, axis = 0)  # 算出这些数据的中心点

        
        #此处为坑
#         centroids.append(centroid)
#         clusterAssments.append(clusterAssment)
        if clusterChanged==True:
            centroids.append(copy.copy(centroid))
            clusterAssments.append(copy.copy(clusterAssment))
            counts.append(count)
    return centroids, clusterAssments,counts
# --------------------测试----------------------------------------------------
# 用测试数据及测试kmeans算法
datMat=loadDataSet('testSet.txt')
myCentroids,clustAssings,counts = kMeans(datMat,4)

#print("clusAssings",clustAssings)
print("counts",counts) # [58, 23, 3, 1]
import matplotlib.pyplot as plt
fig1=plt.figure(1,figsize=(15,30))
len_counts=int(len(counts)/2)+1
print(len_counts)

for i in range(len(counts)):
    
    ax=fig1.add_subplot(len_counts,2,i+1)
    s=clustAssings[i][:,0]+30
    c=clustAssings[i][:,0]+20
   
    ax.scatter(datMat[:,0],datMat[:,1],s,c) #s大小，c颜色
    ax.scatter(myCentroids[i][:,0],myCentroids[i][:,1],s=150,c='r',marker='+')

plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m<ipython-input-7-a036d7dcc390>[0m in [0;36m<module>[0;34m[0m
[1;32m     63[0m [0;31m# --------------------测试----------------------------------------------------[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     64[0m [0;31m# 用测试数据及测试kmeans算法[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 65[0;31m [0mdatMat[0m[0;34m=[0m[0mloadDataSet[0m[0;34m([0m[0;34m'testSet.txt'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     66[0m [0mmyCentroids[0m[0;34m,[0m[0mclustAssings[0m[0;34m,[0m[0mcounts[0m [0;34m=[0m [0mkMeans[0m[0;34m([0m[0mdatMat[0m[0;34m,[0m[0;36m4[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     67[0m [0;34m[0m[0m

[0;32m<ipython-input-7-a036d7dcc390>[0m in [0;36mloadDataSet[0;34m(fileName)[0m
[1;32m      4[0m [0;32mdef[0m [0mloadDataSet[0m[0;34m([0m[0mfileName[0m[0;34m)[0m[0;34m:[0m  [0;31m# 解析文件，按tab分割字段，得到一个浮点数字类型的矩阵[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m     [0mdataMat[0m [0;34m=[0m [0;34m[[0m[0;34m][0m              [0;31m# 文件的最后一个字段是类别标签[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m     [0mfr[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfileName[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      7[0m     [0;32mfor[0m [0mline[0m [0;32min[0m [0mfr[0m[0;34m.[0m[0mreadlines[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m      8[0m         [0mcurLine[0m [0;34m=[0m [0mline[0m[0;34m.[0m[0mstrip[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m'\t'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: 'testSet.txt'
FileNotFoundError: [Errno 2] No such file or directory: 'testSet.txt'

